#!/usr/bin/env python
'''
AWS Information Script - Dan Potepa
Search for amazon instance by ID, Name tag or IP ip_address
The boto python library will look for credentials matching each profile in ~/.aws/credentials file
http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html

TODO:
* Allow configuration by conf file, regions and profiles
* Script will only find the first server matching the criteria, need to allow the user to 'keep searching' 
for example if multiple servers have the same name tag
* Allow interupt
* Validate region is real before openening connecton
'''
import sys
import boto.ec2
import re
import pprint
import os
import ConfigParser

profile = None
regions = None

def print_it(k, v):
	print "{}:\t{}".format(k,v)


def get_instance_from_id(id):
	return get_instance_from(id, 'id')


def get_instance_from_name_tag(name):
	return get_instance_from(name, 'name_tag')


def get_instance_from_ip(ip):
	return get_instance_from(ip, 'ip_address')

#def get_instance_from_dns(dns):
#	return get_instance_from(dns, 'dns_name')


def get_instance_from(field, type):
	return_instance = None
	for region in regions:
		for profile in profiles:
			print "searching {0} {1}".format(profile, region)
			conn = boto.ec2.connect_to_region(region, profile_name=profile)
			try:
				if type == 'name_tag':
					instance = conn.get_all_instances(filters={"tag:Name" : field})[0].instances[0]
					return_instance = (instance.id, profile, region)
				elif type == 'ip_address':
					reservations = conn.get_all_instances()
					for res in reservations:
						for instance in res.instances:
							if instance.ip_address == field:
								return_instance = (instance.id, profile, region)
#				elif type == 'dns_name':
#					reservations = conn.get_all_instances()
#					for res in reservations:
#						for instance in res.instances:
#							if instance.ip_address == field:
#								return_instance = (instance.id, profile, region)
				else:
					instance = conn.get_all_instances([field])[0].instances[0]
					return_instance = (instance.id, profile, region)
				
				if return_instance:
					return return_instance
			except:
				pass
			conn.close	


def print_instance_info(instanceid):
	if instanceid is None:
		print "Not Found"
		sys.exit()
	print ''
	conn = boto.ec2.connect_to_region(instanceid[2], profile_name=instanceid[1])
	try:
		instance = conn.get_all_instances(instance_ids=[instanceid[0]])[0].instances[0]

		try:
			print_it('Name', instance.tags['Name'])
		except KeyError as e:
			print_it('Name', '<tag missing>')
		print_it('ID', instance.id)
		print_it('IP', instance.ip_address)
		print_it('Public DNS-name', instance.public_dns_name)
		print_it('AZ', instance.placement)
		print_it('Type', instance.instance_type)
		print_it('State', instance.state)
		print_it('Key', instance.key_name)

		print ''

		open_ssh_session(instance)

	except KeyError as e:
		print e.message
	except boto.exception.EC2ResponseError as e:
		pass
	except Exception as e:
		print e

	conn.close()


def open_ssh_session(instance):
	if instance.state == 'running':
		try:
			raw_input('Press enter to continue...\n')
			os.system('ssh ec2-user@' + instance.public_dns_name)
		except KeyboardInterrupt:
			print "Cancelled"


def print_usage():
	print "usage {} [i-12345|10.32.41.42|Minitel stage]".format(os.path.basename(__file__))


def load_config():
	global profiles
	global regions

	config_file = '~/.awsi/config.cfg'

	if not os.path.exists(os.path.expanduser(config_file)):
		print "ERROR: missing config file " + config_file
		sys.exit(1)
	
	config = ConfigParser.ConfigParser()
	config.read(os.path.expanduser(config_file))
	regions = config.get('main','regions').split(',')
	profiles = config.get('main','profiles').split(',')

if __name__ == '__main__':

	arg = ' '.join(sys.argv[1:])
	ip_re = re.compile('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
	id_re = re.compile('^i-.{8}$')
	dns_re = re.compile("^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$")

	if not arg:
		print_usage()
		sys.exit()

	load_config()

	if os.path.basename(__file__) == 'awssh':
		__ssh_session = True

	if ip_re.match(arg):
		instance = get_instance_from_ip(arg)
		print_instance_info(instance)
	elif id_re.match(arg):
		instance = get_instance_from_id(arg)
		print_instance_info(instance)
	elif dns_re.match(arg):
                print "Login with Public-DNS-Name....."
		try:
			raw_input('Press enter to continue...\n')
			os.system('ssh ec2-user@' + arg)
		except KeyboardInterrupt:
			print "Cancelled"
	else:
		instance = get_instance_from_name_tag(arg)
		print_instance_info(instance)
